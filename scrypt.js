// 1.	Деструктуризация объекта: Дан объект с информацией о пользователе. Извлеките с помощью 
// деструктуризации имя, возраст и email в переменные из объекта пользователя.
const user = { names: 'Иван', age: 25, email: 'ivan@example.com' };
const { names, age, email } = user;
console.log(names);
console.log(age);
console.log(email);

// 2.	Деструктуризация вложенных объектов: имеется объект с информацией о книге, включая автора, 
// который также является объектом. Используйте деструктуризацию, чтобы извлечь название книги и 
// имя автора в переменные.

const book = { 
    title: 'Война и мир',
    author: { 
        firstName: 'Лев', 
        lastName: 'Толстой' } 
    };
   const {author:{firstName, lastName}, title} = book;

   console.log(firstName, lastName)
   console.log(title)


// 3.	Деструктуризация массивов: Дан массив с именами. Используйте деструктуризацию, чтобы
// извлечь первое и второе имя в отдельные переменные.
const name = ['Иван', 'Алексей', 'Светлана'];
const [first, second] = name;

console.log(first);
console.log(second);


// 4.	Пропуск значений в массиве: имеется массив чисел. Используйте деструктуризацию, чтобы
// извлечь первое и третье число, пропустив второе.
const numbers = [1, 2, 3, 4, 5];
const [one , , three] = numbers;
console.log(one, three)

// 5.	Использование остаточных параметров: Дан массив с несколькими значениями. Используйте
// деструктуризацию для извлечения первых двух элементов в переменные и оставшиеся элементы
// поместите в новый массив.
const fruits = ['яблоко', 'банан', 'апельсин', 'киви', 'манго'];
const [newFirst, newSecond, ... third] = fruits;
console.log(newFirst, newSecond)
console.log(third)
// 6.	Деструктуризация параметров функции (почитайте про это в интернете): Создайте функцию,
//  которая принимает объект с параметрами и использует деструктуризацию для извлечения этих
//  параметров в переменные внутри функции и выводит результат в консоль.
function displayUserInfo({name, age, email}) {
    
	console.log(name)
    console.log(age)
    console.log(email)
    
}
const human = { name: 'Петр', age: 30, email: 'petr@example.com' };
displayUserInfo(human);
// 7.	Значения по умолчанию в деструктуризации: Дан объект с информацией о пользователе,
// но некоторые поля(например возраст - age) могут отсутствовать. Используйте деструктуризацию
//  со значениями по умолчанию, чтобы избежать ошибок при отсутствии данных.
const pipl = { name: 'Иван', email: 'ivan@example.com' };

const people = ({name, age = 18, email} ) => {
 console.log(name,age,email)
}
people(pipl)